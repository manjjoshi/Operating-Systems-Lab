#include <stdio.h>
#include <limits.h>

typedef struct {
    int pid;
    int burst_time;
    int arrival_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int completion_time; 
} Process;

void calculateTimes(Process processes[], int n) {
    int completed = 0, current_time = 0, min_priority_index;
    int total_waiting_time = 0, total_turnaround_time = 0;

    while (completed != n) {
        min_priority_index = -1;
        int min_priority = INT_MAX;
        
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0 && processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                min_priority_index = i;
            }
        }
        
        if (min_priority_index != -1) {
            processes[min_priority_index].remaining_time--;
            
            if (processes[min_priority_index].remaining_time == 0) {
                completed++;
                int finish_time = current_time + 1;
                processes[min_priority_index].completion_time = finish_time; // Set completion time
                processes[min_priority_index].turnaround_time = finish_time - processes[min_priority_index].arrival_time;
                processes[min_priority_index].waiting_time = processes[min_priority_index].turnaround_time - processes[min_priority_index].burst_time;
                total_waiting_time += processes[min_priority_index].waiting_time;
                total_turnaround_time += processes[min_priority_index].turnaround_time;
            }
        }
        
        current_time++;
    }

    printf("Pre-emptive Priority Scheduling:\n");
    printf("PID\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time, processes[i].completion_time);
    }
    printf("Average Waiting Time: %.2f\n", (float) total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float) total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time, arrival time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].burst_time, &processes[i].arrival_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }
    calculateTimes(processes, n);
    return 0;
}
